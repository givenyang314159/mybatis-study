1. select返回类型用List 封装
返回结果为List时候 <select> 标签的resutType 为List 中Object 的类型
List<Employee> findAll();
<select id="findAll" resultType="com.study.bean.Employee">
        SELECT * FROM t_employee
    </select>
@Test
    public void getAll()
    {
        System.out.println(employeeMapper.findAll());
    }

[Employee(id=1, lastName=tomupdate2, gender=M, email=eamilupdate@fm), Employee(id=3, lastName=tomupdate, gender=F, email=given@fm.com), Employee(id=5, lastName=张三, gender=女, email=zhangsan@fm.com), Employee(id=6, lastName=given6, gender=F, email=given@fm.com), Employee(id=7, lastName=given7, gender=F, email=given@fm.com), Employee(id=8, lastName=杨畔, gender=男, email=yp@fm.com)]
============================================================

2. select 返回类型用map 封装
接口上使用@Mapkey 指定封装map 的key ,select 标签使用返回类型为：Map 中Value的类型

    @MapKey("id")
    Map<Long,Employee> getByName(@Param("name") String name);

      <select id="getByName" resultType="com.study.bean.Employee">
            SELECT * FROM t_employee where lastName like '%${name}%'
        </select>
 @Test
    public void getEmpTest()
    {
        System.out.println(employeeMapper.getByName("giv"));
    }

{6=Employee(id=6, lastName=given6, gender=F, email=given@fm.com), 7=Employee(id=7, lastName=given7, gender=F, email=given@fm.com)}
=====================================================================
3.  自定义结果集
使用resultMap 为结果返回类型,封装使用的是id 和result的键
xml:
  <!--一般封装结果集，包含所有的字段 -->
    <resultMap id="emp1" type="com.study.bean.Employee">
        <id column="id" property="id"></id>
        <result column="lastName" property="lastName"></result>
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
    </resultMap>

    <select id="findallbyResutMap" resultMap="emp1">
        SELECT * from t_employee
    </select>
==============================================================
resutlMap 封装用户自定义类型

场景一： Employee 中有对象Department 对象的信息  Departement dept

联合查询使用级联属性: 属性.属性
 <resultMap id="emp2" type="com.study.bean.Employee">
        <id column="id" property="id"></id>
        <result column="lastName" property="lastName"></result>
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
        <result column="depid" property="dept.id"></result>
        <result column="deptName" property="dept.name"></result>
    </resultMap>

    <select id="findEmpAndDept" resultMap="emp2">
        select e.id id,e.lastName lastName,e.gender gender,e.email email,e.depid depid,d.`name` deptName from t_employee e,t_dep d where e.depid=d.id and e.id =1
    </select>


  使用联合属性标签<association>, property 和javaType 对应的对象。 使用封装单个关联的对象
<resultMap id="emp2" type="com.study.bean.Employee">
        <id column="id" property="id"></id>
        <result column="lastName" property="lastName"></result>
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
        <association property="dept" javaType="com.study.bean.Department">
            <id column="did" property="id"></id>
            <result column="deptName" property="name"></result>
        </association>
    </resultMap>
    <select id="findEmpAndDept" resultMap="emp2">
        select e.id id,e.lastName lastName,e.gender gender,e.email email,e.depid depid,d.`name` deptName from t_employee e,t_dep d where e.depid=d.id and e.id =#{id}
    </select>
=======================================================================
使用association 执行分步查询 ，支持延迟加载
association 标签的属性 ：
property属性：对应的对象的属性，select 标签对应着下一步查询，column对应着传入下一步查询的参数列
  <resultMap id="emp3" type="com.study.bean.Employee">
        <id column="id" property="id"></id>
        <result column="lastName" property="lastName"></result>
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
        <association property="dept" select="com.study.service.DeptMapper.findDeptById" column="depid" >
        </association>
    </resultMap>
    <select id="findEmpAndDeptByStep" resultMap="emp3">
         SELECT * FROM t_employee WHERE id=#{id}
    </select>
===================================================
分步查询的基础添加两个配置,开启延迟加载，当使用到关联对象时候会发sql去查询，没有使用到不会去发sql
配置：
<setting name="lazyLoadingEnabled" value="true"></setting>
<setting name="aggressiveLazyLoading" value="false"></setting>

e.g. :
System.out.println(employeeMapper.findEmpAndDeptByStep(Long.valueOf(5)).getLastName()); 没有使用到关联对象dept 的相关信息，所以会懒加载，只发一条sql
Preparing: SELECT * FROM t_employee WHERE id=?

employeeMapper.findEmpAndDeptByStep(Long.valueOf(5)).getDept().getName() 使用了关联对象
，会发两条sql:
 Preparing: SELECT * FROM t_employee WHERE id=?
Preparing: SELECT * FROM t_dep WHERE id=?

=============================================================================
场景2 ：Department 中有多个Employee ,使用的List<Employee> emps;
使用collection集合关联多个属性：

级联查询：
<resultMap id="dept" type="com.study.bean.Department">
        <id column="did" property="id"></id>
        <result column="deptName" property="name"></result>
        <collection property="emps" ofType="com.study.bean.Employee">
            <id column="eid" property="id"></id>
            <result column="lastName" property="lastName"></result>
            <result column="gender" property="gender"/>
            <result column="email" property="email"/>
        </collection>
    </resultMap>
    <select id="findDeptByIdAndEmps" resultMap="dept">
        SELECT t.id did,t.`name` deptName,e.id eid,e.lastName lastName,e.gender gender,e.email email FROM t_dep t LEFT JOIN t_employee e ON t.id=e.depid where t.id=#{id}
    </select>
==================================================

分步查询：
property ： 指定对象的属性
select : 指定使用下一个使用的选择器
column: 指定传入的参数列，指的是sql 语句中查询出来的列名
<resultMap id="dept2" type="com.study.bean.Department">
        <id column="did" property="id"></id>
        <result column="deptName" property="name"></result>
        <collection property="emps" select="com.study.service.EmployeeMapper.findEmpByDepid" column="did"/>
    </resultMap>

    <select id="findDeptByIdAndEmp2" resultMap="dept2">
        SELECT t.id did,t.`name` deptName FROM t_dep t WHERE t.id=#{id}
    </select>


==============================================================
当分步查询多个参数时候使用map传递参数
{"key=value"} 的方式传入 e.g.   其中key 是select 选择器中选定的参数： value是本次查询中选择的

选择器：
  <select id="findEmpByDepid" resultMap="emp1">
        SELECT * FROM t_employee where depid=#{depid}
    </select>

 本次查询：
    <resultMap id="dept2" type="com.study.bean.Department">
            <id column="did" property="id"></id>
            <result column="deptName" property="name"></result>
            <collection property="emps" select="com.study.service.EmployeeMapper.findEmpByDepid" column="did"/>
        </resultMap>

        <select id="findDeptByIdAndEmp2" resultMap="dept2">
            SELECT t.id did,t.`name` deptName FROM t_dep t WHERE t.id=#{id}
        </select>
所以
  column ="{depid=did}"






